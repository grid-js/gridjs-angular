// This file is generated automatically using "nx update-bindings gridjs-angular"
// Do not edit this file manually
import { Config } from 'gridjs';
import { GridEvents } from 'gridjs/dist/src/events';
import { Component, Input, Output, EventEmitter, signal, computed, effect } from '@angular/core';
import 'preact';

type GridEventsEmitter = Record<keyof GridEvents, EventEmitter<any>>;

export const GRID_EVENTS: Array<keyof GridEvents> = [
  'beforeLoad',
  'load',
  'ready',
  'cellClick',
  'rowClick',
];

@Component({ template: '' })
export abstract class GridJsAngularBindingBase implements GridEventsEmitter {
  constructor() {
    effect(() => {
      const instanceVal = this.instance();
      const instance = this.instance();
      if (instanceVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ instance: instanceVal });
      instance.forceRender();
    });
    effect(() => {
      const storeVal = this.store();
      const instance = this.instance();
      if (storeVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ store: storeVal });
      instance.forceRender();
    });
    effect(() => {
      const eventEmitterVal = this.eventEmitter();
      const instance = this.instance();
      if (eventEmitterVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ eventEmitter: eventEmitterVal });
      instance.forceRender();
    });
    effect(() => {
      const pluginVal = this.plugin();
      const instance = this.instance();
      if (pluginVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ plugin: pluginVal });
      instance.forceRender();
    });
    effect(() => {
      const containerVal = this.container();
      const instance = this.instance();
      if (containerVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ container: containerVal });
      instance.forceRender();
    });
    effect(() => {
      const tableRefVal = this.tableRef();
      const instance = this.instance();
      if (tableRefVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ tableRef: tableRefVal });
      instance.forceRender();
    });
    effect(() => {
      const dataVal = this.data();
      const instance = this.instance();
      if (dataVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ data: dataVal });
      instance.forceRender();
    });
    effect(() => {
      const serverVal = this.server();
      const instance = this.instance();
      if (serverVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ server: serverVal });
      instance.forceRender();
    });
    effect(() => {
      const headerVal = this.header();
      const instance = this.instance();
      if (headerVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ header: headerVal });
      instance.forceRender();
    });
    effect(() => {
      const fromVal = this.from();
      const instance = this.instance();
      if (fromVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ from: fromVal });
      instance.forceRender();
    });
    effect(() => {
      const storageVal = this.storage();
      const instance = this.instance();
      if (storageVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ storage: storageVal });
      instance.forceRender();
    });
    effect(() => {
      const processingThrottleMsVal = this.processingThrottleMs();
      const instance = this.instance();
      if (processingThrottleMsVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ processingThrottleMs: processingThrottleMsVal });
      instance.forceRender();
    });
    effect(() => {
      const pipelineVal = this.pipeline();
      const instance = this.instance();
      if (pipelineVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ pipeline: pipelineVal });
      instance.forceRender();
    });
    effect(() => {
      const autoWidthVal = this.autoWidth();
      const instance = this.instance();
      if (autoWidthVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ autoWidth: autoWidthVal });
      instance.forceRender();
    });
    effect(() => {
      const widthVal = this.width();
      const instance = this.instance();
      if (widthVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ width: widthVal });
      instance.forceRender();
    });
    effect(() => {
      const heightVal = this.height();
      const instance = this.instance();
      if (heightVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ height: heightVal });
      instance.forceRender();
    });
    effect(() => {
      const paginationVal = this.pagination();
      const instance = this.instance();
      if (paginationVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ pagination: paginationVal });
      instance.forceRender();
    });
    effect(() => {
      const sortVal = this.sort();
      const instance = this.instance();
      if (sortVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ sort: sortVal });
      instance.forceRender();
    });
    effect(() => {
      const translatorVal = this.translator();
      const instance = this.instance();
      if (translatorVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ translator: translatorVal });
      instance.forceRender();
    });
    effect(() => {
      const fixedHeaderVal = this.fixedHeader();
      const instance = this.instance();
      if (fixedHeaderVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ fixedHeader: fixedHeaderVal });
      instance.forceRender();
    });
    effect(() => {
      const resizableVal = this.resizable();
      const instance = this.instance();
      if (resizableVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ resizable: resizableVal });
      instance.forceRender();
    });
    effect(() => {
      const columnsVal = this.columns();
      const instance = this.instance();
      if (columnsVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ columns: columnsVal });
      instance.forceRender();
    });
    effect(() => {
      const searchVal = this.search();
      const instance = this.instance();
      if (searchVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ search: searchVal });
      instance.forceRender();
    });
    effect(() => {
      const languageVal = this.language();
      const instance = this.instance();
      if (languageVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ language: languageVal });
      instance.forceRender();
    });
    effect(() => {
      const pluginsVal = this.plugins();
      const instance = this.instance();
      if (pluginsVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ plugins: pluginsVal });
      instance.forceRender();
    });
    effect(() => {
      const styleVal = this.style();
      const instance = this.instance();
      if (styleVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ style: styleVal });
      instance.forceRender();
    });
    effect(() => {
      const classNameVal = this.className();
      const instance = this.instance();
      if (classNameVal === undefined || !instance) {
        return;
      }
      instance.updateConfig({ className: classNameVal });
      instance.forceRender();
    });
  }

  readonly instance = signal<Config['instance'] | undefined>(undefined);
  @Input({alias: 'instance'})
  set _instance(value: Config['instance'] | undefined) {
    this.instance.set(value);
  }

  readonly store = signal<Config['store'] | undefined>(undefined);
  @Input({alias: 'store'})
  set _store(value: Config['store'] | undefined) {
    this.store.set(value);
  }

  readonly eventEmitter = signal<Config['eventEmitter'] | undefined>(undefined);
  @Input({alias: 'eventEmitter'})
  set _eventEmitter(value: Config['eventEmitter'] | undefined) {
    this.eventEmitter.set(value);
  }

  readonly plugin = signal<Config['plugin'] | undefined>(undefined);
  @Input({alias: 'plugin'})
  set _plugin(value: Config['plugin'] | undefined) {
    this.plugin.set(value);
  }

  readonly container = signal<Config['container'] | undefined>(undefined);
  @Input({alias: 'container'})
  set _container(value: Config['container'] | undefined) {
    this.container.set(value);
  }

  readonly tableRef = signal<Config['tableRef'] | undefined>(undefined);
  @Input({alias: 'tableRef'})
  set _tableRef(value: Config['tableRef'] | undefined) {
    this.tableRef.set(value);
  }

  readonly data = signal<Config['data'] | undefined>(undefined);
  @Input({alias: 'data'})
  set _data(value: Config['data'] | undefined) {
    this.data.set(value);
  }

  readonly server = signal<Config['server'] | undefined>(undefined);
  @Input({alias: 'server'})
  set _server(value: Config['server'] | undefined) {
    this.server.set(value);
  }

  readonly header = signal<Config['header'] | undefined>(undefined);
  @Input({alias: 'header'})
  set _header(value: Config['header'] | undefined) {
    this.header.set(value);
  }

  readonly from = signal<Config['from'] | undefined>(undefined);
  @Input({alias: 'from'})
  set _from(value: Config['from'] | undefined) {
    this.from.set(value);
  }

  readonly storage = signal<Config['storage'] | undefined>(undefined);
  @Input({alias: 'storage'})
  set _storage(value: Config['storage'] | undefined) {
    this.storage.set(value);
  }

  readonly processingThrottleMs = signal<Config['processingThrottleMs'] | undefined>(undefined);
  @Input({alias: 'processingThrottleMs'})
  set _processingThrottleMs(value: Config['processingThrottleMs'] | undefined) {
    this.processingThrottleMs.set(value);
  }

  readonly pipeline = signal<Config['pipeline'] | undefined>(undefined);
  @Input({alias: 'pipeline'})
  set _pipeline(value: Config['pipeline'] | undefined) {
    this.pipeline.set(value);
  }

  readonly autoWidth = signal<Config['autoWidth'] | undefined>(undefined);
  @Input({alias: 'autoWidth'})
  set _autoWidth(value: Config['autoWidth'] | undefined) {
    this.autoWidth.set(value);
  }

  readonly width = signal<Config['width'] | undefined>(undefined);
  @Input({alias: 'width'})
  set _width(value: Config['width'] | undefined) {
    this.width.set(value);
  }

  readonly height = signal<Config['height'] | undefined>(undefined);
  @Input({alias: 'height'})
  set _height(value: Config['height'] | undefined) {
    this.height.set(value);
  }

  readonly pagination = signal<Config['pagination'] | undefined>(undefined);
  @Input({alias: 'pagination'})
  set _pagination(value: Config['pagination'] | undefined) {
    this.pagination.set(value);
  }

  readonly sort = signal<Config['sort'] | undefined>(undefined);
  @Input({alias: 'sort'})
  set _sort(value: Config['sort'] | undefined) {
    this.sort.set(value);
  }

  readonly translator = signal<Config['translator'] | undefined>(undefined);
  @Input({alias: 'translator'})
  set _translator(value: Config['translator'] | undefined) {
    this.translator.set(value);
  }

  readonly fixedHeader = signal<Config['fixedHeader'] | undefined>(undefined);
  @Input({alias: 'fixedHeader'})
  set _fixedHeader(value: Config['fixedHeader'] | undefined) {
    this.fixedHeader.set(value);
  }

  readonly resizable = signal<Config['resizable'] | undefined>(undefined);
  @Input({alias: 'resizable'})
  set _resizable(value: Config['resizable'] | undefined) {
    this.resizable.set(value);
  }

  readonly columns = signal<Config['columns'] | undefined>(undefined);
  @Input({alias: 'columns'})
  set _columns(value: Config['columns'] | undefined) {
    this.columns.set(value);
  }

  readonly search = signal<Config['search'] | undefined>(undefined);
  @Input({alias: 'search'})
  set _search(value: Config['search'] | undefined) {
    this.search.set(value);
  }

  readonly language = signal<Config['language'] | undefined>(undefined);
  @Input({alias: 'language'})
  set _language(value: Config['language'] | undefined) {
    this.language.set(value);
  }

  readonly plugins = signal<Config['plugins'] | undefined>(undefined);
  @Input({alias: 'plugins'})
  set _plugins(value: Config['plugins'] | undefined) {
    this.plugins.set(value);
  }

  readonly style = signal<Config['style'] | undefined>(undefined);
  @Input({alias: 'style'})
  set _style(value: Config['style'] | undefined) {
    this.style.set(value);
  }

  readonly className = signal<Config['className'] | undefined>(undefined);
  @Input({alias: 'className'})
  set _className(value: Config['className'] | undefined) {
    this.className.set(value);
  }

  readonly gridConfig = signal<Partial<Config> | undefined>(undefined);
  @Input({alias: 'gridConfig'})
  set _gridConfig(value: Partial<Config> | undefined) {
    this.gridConfig.set(value);
  }

  readonly config = computed<Partial<Config>>(() => {
    const configValue: Partial<Config> = {
      instance: this.instance(),
      store: this.store(),
      eventEmitter: this.eventEmitter(),
      plugin: this.plugin(),
      container: this.container(),
      tableRef: this.tableRef(),
      data: this.data(),
      server: this.server(),
      header: this.header(),
      from: this.from(),
      storage: this.storage(),
      processingThrottleMs: this.processingThrottleMs(),
      pipeline: this.pipeline(),
      autoWidth: this.autoWidth(),
      width: this.width(),
      height: this.height(),
      pagination: this.pagination(),
      sort: this.sort(),
      translator: this.translator(),
      fixedHeader: this.fixedHeader(),
      resizable: this.resizable(),
      columns: this.columns(),
      search: this.search(),
      language: this.language(),
      plugins: this.plugins(),
      style: this.style(),
      className: this.className(),
    };
    for(let key in configValue) {
      const keyName = key as keyof Config;
      if (configValue[keyName] === undefined) {
        delete configValue[keyName];
      }
    }
    return {
      ...this.gridConfig(),
      ...configValue
    };
  });

  @Output()
  readonly beforeLoad = new EventEmitter<any>();
  @Output()
  readonly load = new EventEmitter<any>();
  @Output()
  readonly ready = new EventEmitter<any>();
  @Output()
  readonly cellClick = new EventEmitter<any>();
  @Output()
  readonly rowClick = new EventEmitter<any>();
}
