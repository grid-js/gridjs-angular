// This file is generated automatically using "nx update-bindings gridjs-angular"
// Do not edit this file manually
{{#inputTypes}}
import { {{typeName}} } from '{{&importPath}}';
{{/inputTypes}}
{{#outputTypes}}
import { {{typeName}} } from '{{&importPath}}';
{{/outputTypes}}
import { Component, Input, Output, EventEmitter, signal, computed, effect } from '@angular/core';
import 'preact';

{{#outputTypes}}
type {{typeName}}Emitter = Record<keyof {{typeName}}, EventEmitter<any>>;
{{/outputTypes}}

{{#outputTypes}}
export const {{#constantCase}}{{typeName}}{{/constantCase}}: Array<keyof {{typeName}}> = [
  {{#members}}
  '{{.}}',
  {{/members}}
];
{{/outputTypes}}

@Component({ template: '' })
export abstract class GridJsAngularBindingBase implements GridEventsEmitter {
  constructor() {
    {{#inputTypes}}{{#members}}
    effect(() => {
      const {{.}}Val = this.{{.}}();
      const instance = this.instance();
      if ({{.}}Val === undefined || !instance) {
        return;
      }
      instance.updateConfig({ {{.}}: {{.}}Val });
      instance.forceRender();
    });
    {{/members}}{{/inputTypes}}
  }

{{#inputTypes}}
  {{#members}}
  readonly {{.}} = signal<{{typeName}}['{{.}}'] | undefined>(undefined);
  @Input({alias: '{{.}}'})
  set _{{.}}(value: {{typeName}}['{{.}}'] | undefined) {
    this.{{.}}.set(value);
  }

  {{/members}}
  readonly gridConfig = signal<Partial<{{typeName}}> | undefined>(undefined);
  @Input({alias: 'gridConfig'})
  set _gridConfig(value: Partial<{{typeName}}> | undefined) {
    this.gridConfig.set(value);
  }

  readonly {{#camelCase}}{{typeName}}{{/camelCase}} = computed<Partial<{{typeName}}>>(() => {
    const {{#camelCase}}{{typeName}}Value{{/camelCase}}: Partial<{{typeName}}> = {
      {{#members}}
      {{.}}: this.{{.}}(),
      {{/members}}
    };
    for(let key in {{#camelCase}}{{typeName}}Value{{/camelCase}}) {
      const keyName = key as keyof {{typeName}};
      if ({{#camelCase}}{{typeName}}Value{{/camelCase}}[keyName] === undefined) {
        delete {{#camelCase}}{{typeName}}Value{{/camelCase}}[keyName];
      }
    }
    return {
      ...this.gridConfig(),
      ...{{#camelCase}}{{typeName}}Value{{/camelCase}}
    };
  });
{{/inputTypes}}

{{#outputTypes}}
  {{#members}}
  @Output()
  readonly {{.}} = new EventEmitter<any>();
  {{/members}}
{{/outputTypes}}
}
